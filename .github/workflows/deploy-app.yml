name: Deploy Application

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'api/**'
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[deploy-backend]') || github.event.repository.full_name == github.repository
    permissions:
      id-token: write # Required for OIDC
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole # CHANGE THIS
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: angular-node-app-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f api/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition angular-node-app-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: angular-node-app-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        run: |
          aws ecs update-service --cluster angular-node-app-cluster --service angular-node-app-service --task-definition ${{ steps.task-def.outputs.task-definition }} --force-new-deployment

  deploy-frontend:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[deploy-frontend]') || github.event.repository.full_name == github.repository
    permissions:
      id-token: write # Required for OIDC
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build Angular App
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionRole # CHANGE THIS
          aws-region: eu-central-1

      - name: Deploy to S3
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name angular-node-app-frontend --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" --output text)
          aws s3 sync ./dist/couple-budget/browser/ $BUCKET_NAME --delete

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name angular-node-app-frontend --query "Stacks[0].Outputs[?OutputKey=='FrontendDistributionId'].OutputValue" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
